// Code generated by counterfeiter. DO NOT EDIT.
package rotatorfakes

import (
	"sync"

	"github.com/cloudfoundry/uaa-key-rotator/crypto"
	"github.com/cloudfoundry/uaa-key-rotator/rotator"
)

type FakeMapEncryptedValueToDB struct {
	MapStub        func(value crypto.EncryptedValue) ([]byte, error)
	mapMutex       sync.RWMutex
	mapArgsForCall []struct {
		value crypto.EncryptedValue
	}
	mapReturns struct {
		result1 []byte
		result2 error
	}
	mapReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMapEncryptedValueToDB) Map(value crypto.EncryptedValue) ([]byte, error) {
	fake.mapMutex.Lock()
	ret, specificReturn := fake.mapReturnsOnCall[len(fake.mapArgsForCall)]
	fake.mapArgsForCall = append(fake.mapArgsForCall, struct {
		value crypto.EncryptedValue
	}{value})
	fake.recordInvocation("Map", []interface{}{value})
	fake.mapMutex.Unlock()
	if fake.MapStub != nil {
		return fake.MapStub(value)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.mapReturns.result1, fake.mapReturns.result2
}

func (fake *FakeMapEncryptedValueToDB) MapCallCount() int {
	fake.mapMutex.RLock()
	defer fake.mapMutex.RUnlock()
	return len(fake.mapArgsForCall)
}

func (fake *FakeMapEncryptedValueToDB) MapArgsForCall(i int) crypto.EncryptedValue {
	fake.mapMutex.RLock()
	defer fake.mapMutex.RUnlock()
	return fake.mapArgsForCall[i].value
}

func (fake *FakeMapEncryptedValueToDB) MapReturns(result1 []byte, result2 error) {
	fake.MapStub = nil
	fake.mapReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeMapEncryptedValueToDB) MapReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.MapStub = nil
	if fake.mapReturnsOnCall == nil {
		fake.mapReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.mapReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeMapEncryptedValueToDB) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.mapMutex.RLock()
	defer fake.mapMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeMapEncryptedValueToDB) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ rotator.MapEncryptedValueToDB = new(FakeMapEncryptedValueToDB)
