// Code generated by counterfeiter. DO NOT EDIT.
package cryptofakes

import (
	"sync"

	"github.com/cloudfoundry/uaa-key-rotator/crypto"
)

type FakeCipherNonceAccessor struct {
	GetNonceStub        func([]byte) ([]byte, error)
	getNonceMutex       sync.RWMutex
	getNonceArgsForCall []struct {
		arg1 []byte
	}
	getNonceReturns struct {
		result1 []byte
		result2 error
	}
	getNonceReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCipherNonceAccessor) GetNonce(arg1 []byte) ([]byte, error) {
	var arg1Copy []byte
	if arg1 != nil {
		arg1Copy = make([]byte, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.getNonceMutex.Lock()
	ret, specificReturn := fake.getNonceReturnsOnCall[len(fake.getNonceArgsForCall)]
	fake.getNonceArgsForCall = append(fake.getNonceArgsForCall, struct {
		arg1 []byte
	}{arg1Copy})
	fake.recordInvocation("GetNonce", []interface{}{arg1Copy})
	fake.getNonceMutex.Unlock()
	if fake.GetNonceStub != nil {
		return fake.GetNonceStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getNonceReturns.result1, fake.getNonceReturns.result2
}

func (fake *FakeCipherNonceAccessor) GetNonceCallCount() int {
	fake.getNonceMutex.RLock()
	defer fake.getNonceMutex.RUnlock()
	return len(fake.getNonceArgsForCall)
}

func (fake *FakeCipherNonceAccessor) GetNonceArgsForCall(i int) []byte {
	fake.getNonceMutex.RLock()
	defer fake.getNonceMutex.RUnlock()
	return fake.getNonceArgsForCall[i].arg1
}

func (fake *FakeCipherNonceAccessor) GetNonceReturns(result1 []byte, result2 error) {
	fake.GetNonceStub = nil
	fake.getNonceReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeCipherNonceAccessor) GetNonceReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.GetNonceStub = nil
	if fake.getNonceReturnsOnCall == nil {
		fake.getNonceReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.getNonceReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeCipherNonceAccessor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getNonceMutex.RLock()
	defer fake.getNonceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCipherNonceAccessor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ crypto.CipherNonceAccessor = new(FakeCipherNonceAccessor)
