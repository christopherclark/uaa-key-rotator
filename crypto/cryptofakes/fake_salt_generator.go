// Code generated by counterfeiter. DO NOT EDIT.
package cryptofakes

import (
	"sync"

	"github.com/cloudfoundry/uaa-key-rotator/crypto"
)

type FakeSaltGenerator struct {
	GetSaltStub        func() ([]byte, error)
	getSaltMutex       sync.RWMutex
	getSaltArgsForCall []struct{}
	getSaltReturns     struct {
		result1 []byte
		result2 error
	}
	getSaltReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSaltGenerator) GetSalt() ([]byte, error) {
	fake.getSaltMutex.Lock()
	ret, specificReturn := fake.getSaltReturnsOnCall[len(fake.getSaltArgsForCall)]
	fake.getSaltArgsForCall = append(fake.getSaltArgsForCall, struct{}{})
	fake.recordInvocation("GetSalt", []interface{}{})
	fake.getSaltMutex.Unlock()
	if fake.GetSaltStub != nil {
		return fake.GetSaltStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getSaltReturns.result1, fake.getSaltReturns.result2
}

func (fake *FakeSaltGenerator) GetSaltCallCount() int {
	fake.getSaltMutex.RLock()
	defer fake.getSaltMutex.RUnlock()
	return len(fake.getSaltArgsForCall)
}

func (fake *FakeSaltGenerator) GetSaltReturns(result1 []byte, result2 error) {
	fake.GetSaltStub = nil
	fake.getSaltReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeSaltGenerator) GetSaltReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.GetSaltStub = nil
	if fake.getSaltReturnsOnCall == nil {
		fake.getSaltReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.getSaltReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeSaltGenerator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getSaltMutex.RLock()
	defer fake.getSaltMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSaltGenerator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ crypto.SaltGenerator = new(FakeSaltGenerator)
