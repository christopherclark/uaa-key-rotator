// Code generated by counterfeiter. DO NOT EDIT.
package cryptofakes

import (
	"sync"

	"github.com/cloudfoundry/uaa-key-rotator/crypto"
)

type FakeNonceGenerator struct {
	GetNonceStub        func() []byte
	getNonceMutex       sync.RWMutex
	getNonceArgsForCall []struct{}
	getNonceReturns     struct {
		result1 []byte
	}
	getNonceReturnsOnCall map[int]struct {
		result1 []byte
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeNonceGenerator) GetNonce() []byte {
	fake.getNonceMutex.Lock()
	ret, specificReturn := fake.getNonceReturnsOnCall[len(fake.getNonceArgsForCall)]
	fake.getNonceArgsForCall = append(fake.getNonceArgsForCall, struct{}{})
	fake.recordInvocation("GetNonce", []interface{}{})
	fake.getNonceMutex.Unlock()
	if fake.GetNonceStub != nil {
		return fake.GetNonceStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.getNonceReturns.result1
}

func (fake *FakeNonceGenerator) GetNonceCallCount() int {
	fake.getNonceMutex.RLock()
	defer fake.getNonceMutex.RUnlock()
	return len(fake.getNonceArgsForCall)
}

func (fake *FakeNonceGenerator) GetNonceReturns(result1 []byte) {
	fake.GetNonceStub = nil
	fake.getNonceReturns = struct {
		result1 []byte
	}{result1}
}

func (fake *FakeNonceGenerator) GetNonceReturnsOnCall(i int, result1 []byte) {
	fake.GetNonceStub = nil
	if fake.getNonceReturnsOnCall == nil {
		fake.getNonceReturnsOnCall = make(map[int]struct {
			result1 []byte
		})
	}
	fake.getNonceReturnsOnCall[i] = struct {
		result1 []byte
	}{result1}
}

func (fake *FakeNonceGenerator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getNonceMutex.RLock()
	defer fake.getNonceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeNonceGenerator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ crypto.NonceGenerator = new(FakeNonceGenerator)
