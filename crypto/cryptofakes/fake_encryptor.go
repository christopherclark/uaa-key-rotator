// Code generated by counterfeiter. DO NOT EDIT.
package cryptofakes

import (
	"sync"

	"github.com/cloudfoundry/uaa-key-rotator/crypto"
)

type FakeEncryptor struct {
	EncryptStub        func(plainText string) (crypto.EncryptedValue, error)
	encryptMutex       sync.RWMutex
	encryptArgsForCall []struct {
		plainText string
	}
	encryptReturns struct {
		result1 crypto.EncryptedValue
		result2 error
	}
	encryptReturnsOnCall map[int]struct {
		result1 crypto.EncryptedValue
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeEncryptor) Encrypt(plainText string) (crypto.EncryptedValue, error) {
	fake.encryptMutex.Lock()
	ret, specificReturn := fake.encryptReturnsOnCall[len(fake.encryptArgsForCall)]
	fake.encryptArgsForCall = append(fake.encryptArgsForCall, struct {
		plainText string
	}{plainText})
	fake.recordInvocation("Encrypt", []interface{}{plainText})
	fake.encryptMutex.Unlock()
	if fake.EncryptStub != nil {
		return fake.EncryptStub(plainText)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.encryptReturns.result1, fake.encryptReturns.result2
}

func (fake *FakeEncryptor) EncryptCallCount() int {
	fake.encryptMutex.RLock()
	defer fake.encryptMutex.RUnlock()
	return len(fake.encryptArgsForCall)
}

func (fake *FakeEncryptor) EncryptArgsForCall(i int) string {
	fake.encryptMutex.RLock()
	defer fake.encryptMutex.RUnlock()
	return fake.encryptArgsForCall[i].plainText
}

func (fake *FakeEncryptor) EncryptReturns(result1 crypto.EncryptedValue, result2 error) {
	fake.EncryptStub = nil
	fake.encryptReturns = struct {
		result1 crypto.EncryptedValue
		result2 error
	}{result1, result2}
}

func (fake *FakeEncryptor) EncryptReturnsOnCall(i int, result1 crypto.EncryptedValue, result2 error) {
	fake.EncryptStub = nil
	if fake.encryptReturnsOnCall == nil {
		fake.encryptReturnsOnCall = make(map[int]struct {
			result1 crypto.EncryptedValue
			result2 error
		})
	}
	fake.encryptReturnsOnCall[i] = struct {
		result1 crypto.EncryptedValue
		result2 error
	}{result1, result2}
}

func (fake *FakeEncryptor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.encryptMutex.RLock()
	defer fake.encryptMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeEncryptor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ crypto.Encryptor = new(FakeEncryptor)
